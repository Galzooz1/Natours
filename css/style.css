/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

* {
    margin: 0;
    padding: 0;
    box-sizing: inherit;
}

html {
    /*
    using default font-size for each element as 66% of the initial value font-size
    which is 16px. that means the default value now for our project is equals 10px.
    when we use rem for the rest of the elements it implements directly by the root
    specification of the font-size.
    so for now every 1rem = 10px;
    and if we want to change all website font-size for user reasons,
    all we need to change is the font-size % of our root element.
    Which also help us maintain scalable code and improve responsive design!
    */
    font-size: 66%;
}

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 1.6rem;
    /* line-height: the height of lines */
    line-height: 1.7;
    color:#777;
    padding: 3rem;

    box-sizing: border-box;
}

.header {
    /* height: 95vh = 95% of the viewport height */
    height: 95vh;
    position: relative;
    /* two background imgs */
    background-image: linear-gradient(
        to right bottom,
        rgba(126, 213, 111, 0.8),
        rgba(40, 180, 133, 0.8)),
        url("../img/hero.jpg");
    background-size: cover;
    background-position: top;
    /* four corners X and Y of the page
    the left top is the first x and y */
    
    /* x y ----- x y */
    /*     -----     */
    /* x y ----- x y */

    /* example of my triangle: */
    /* clip-path: polygon(50% 0, 50% 0, 0 100%, 100% 100%); */

    /* example of teacher traingle */
    /* clip-path: polygon(50% 0, 100% 100%, 0 100%); */

    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
}

.header__logo {
    height: 3.5rem;
}

.header__text-box {
    /* making the box in the middle verticaly and horizontaly */
    position: absolute;
    top: 40%;
    left: 50%;
    /* Translating the this element to cut off 50% of itself */
    /* This what makes it possible that the element is exactly at the center */
    transform: translate(-50%, -50%);
    text-align: center;
}

.heading-primary {
    color:#fff;
    text-transform: uppercase;

    /* determines if the back part of the element
     when we tranform it is visible or hidden */
     /* Using it to avoid shake of animation at the end! */
    backface-visibility: hidden;

    margin:6rem ;

}

.heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;

    /* --- Animation ---- */
    /* make animation work on that element */
    animation-name: moveInLeft;
    /* transition of animation */
    animation-duration: 1s;

    /* animation delay - it will wait before starting */
    /* animation-delay: 3s; */

    /* animation-count will happen amount of count */
    /* animation-iteration-count: 3; */

    /* animation-timing-func - specify timing of animation */
    /* ease out -> firstly slow than fast */
    animation-timing-function: ease-out;

}

.heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;

    /* shourthand of specifation */
    animation: moveInRight 1s ease-out;
}

@keyframes moveInLeft {
    /* Start of animation */
    0% {
        opacity: 0;
        transform: translateX(-10rem);
    }

    /* middle of animation */
    80% {
        transform: translateX(1rem);
    }

    /* End of animation */
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }

    80% {
        transform: translateX(-1rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(3rem);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

/* psudo class is special a state of the selector */

/* link -> is special state of a selector
when it is an anchor element so it functions as a link */

/* visited -> this is the state when the user has already clicked 
the button before and then sees the button again */
.btn:link,
.btn:visited {
text-transform: uppercase;
text-decoration: none;
padding: 1.5rem 4rem;
display: inline-block;
border-radius: 10rem;
/* shorthand for transition */
/* all -> to all propreties */
transition: all 0.2s;
position: relative;
}

.btn:hover {
    transform: translateY(-.3rem);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
}

.btn:active {
    transform: translateY(-.1rem);
    box-shadow: 0 .5rem 1rem rgba(0, 0, 0, 0.2);
}

.btn--white {
    background-color: #fff;
    color: #777;
}

.btn::after {
    content: '';
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 100px;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s;
}

.btn--white::after {
    background-color: #fff;
}

.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0;
}

.btn--animated {
    animation: moveInBottom .5s ease-out .75s;
    /* fill-mode -> automatically applies the styles up to 0% before the animation starts */
    animation-fill-mode: backwards;
}